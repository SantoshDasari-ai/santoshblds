name: Update Dependencies

on:
  schedule:
    # Run every Sunday at 6:00 AM UTC
    - cron: "0 6 * * 0"
  workflow_dispatch: # Allow manual triggering
    inputs:
      update_type:
        description: "Type of updates to perform"
        required: true
        default: "minor"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"
          - "all"

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    name: Update Dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for updates
        id: check
        run: |
          echo "Checking for available updates..."

          # Determine update level based on input or default to minor
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"

          case $UPDATE_TYPE in
            "patch")
              NCU_TARGET="patch"
              ;;
            "minor")
              NCU_TARGET="minor"
              ;;
            "major")
              NCU_TARGET="latest"
              ;;
            "all")
              NCU_TARGET="latest"
              ;;
            *)
              NCU_TARGET="minor"
              ;;
          esac

          echo "update_target=$NCU_TARGET" >> $GITHUB_OUTPUT

          # Check what updates are available
          ncu --target $NCU_TARGET --jsonUpgraded > available-updates.json || echo "{}" > available-updates.json

          # Count available updates
          UPDATE_COUNT=$(cat available-updates.json | jq 'length')
          echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT

          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Found $UPDATE_COUNT package updates available"
            cat available-updates.json | jq .
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No updates available"
          fi

      - name: Update dependencies
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "Updating dependencies..."
          ncu --target ${{ steps.check.outputs.update_target }} -u

          # Install updated dependencies
          npm install

      - name: Run tests after update
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "Running tests to ensure updates don't break anything..."

          # Run linting
          npm run lint || echo "Linting failed - will be noted in PR"

          # Try to build the project
          npm run build || echo "Build failed - will be noted in PR"

      - name: Generate update summary
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "## 📦 Dependency Updates Summary" > update-summary.md
          echo "" >> update-summary.md
          echo "The following packages have been updated:" >> update-summary.md
          echo "" >> update-summary.md
          echo "| Package | Previous | New |" >> update-summary.md
          echo "|---------|----------|-----|" >> update-summary.md

          # Parse the updates and create a table
          cat available-updates.json | jq -r 'to_entries[] | "| \(.key) | \(.value.from // "N/A") | \(.value.to // .value) |"' >> update-summary.md

          echo "" >> update-summary.md
          echo "### 🧪 Test Results" >> update-summary.md
          echo "" >> update-summary.md

          # Check if build succeeded
          if npm run build > build-output.log 2>&1; then
            echo "✅ Build: Successful" >> update-summary.md
          else
            echo "❌ Build: Failed (see build logs)" >> update-summary.md
          fi

          # Check if lint succeeded
          if npm run lint > lint-output.log 2>&1; then
            echo "✅ Lint: Passed" >> update-summary.md
          else
            echo "⚠️ Lint: Issues found (see lint logs)" >> update-summary.md
          fi

      - name: Create Pull Request
        if: steps.check.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies (${{ steps.check.outputs.update_target }} updates)"
          title: "📦 Update dependencies (${{ steps.check.outputs.update_target }} updates)"
          body-path: update-summary.md
          branch: chore/update-dependencies-${{ steps.check.outputs.update_target }}
          delete-branch: true
          labels: |
            dependencies
            automated
          assignees: santoshblds
          reviewers: santoshblds

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-update-logs
          path: |
            available-updates.json
            update-summary.md
            build-output.log
            lint-output.log
          retention-days: 7

  check-security-after-update:
    needs: update-dependencies
    if: needs.update-dependencies.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    name: Security Check After Update

    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: chore/update-dependencies-${{ needs.update-dependencies.outputs.update_target }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit on updated dependencies..."
          npm audit --audit-level=moderate || true
