name: Update Dependencies

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of updates to perform"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - patch
          - minor
          - major

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for updates
        id: check-updates
        run: |
          echo "Checking for available updates..."

          # Determine update target based on input
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'all' }}"

          case $UPDATE_TYPE in
            patch)
              TARGET="patch"
              ;;
            minor)
              TARGET="minor"
              ;;
            major)
              TARGET="latest"
              ;;
            *)
              TARGET="minor"  # Default to minor updates for safety
              ;;
          esac

          echo "update_target=$TARGET" >> $GITHUB_OUTPUT

          # Check what would be updated
          if ncu --target $TARGET --jsonUpgraded > updates.json; then
            if [ -s updates.json ] && [ "$(cat updates.json)" != "{}" ]; then
              echo "has_updates=true" >> $GITHUB_OUTPUT
              echo "Updates available:"
              cat updates.json | jq '.'
            else
              echo "has_updates=false" >> $GITHUB_OUTPUT
              echo "No updates available"
            fi
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "Error checking for updates"
          fi

      - name: Update dependencies
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          echo "Updating dependencies to ${{ steps.check-updates.outputs.update_target }} versions..."
          ncu --target ${{ steps.check-updates.outputs.update_target }} -u
          npm install

      - name: Run tests and checks
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          echo "Running tests and checks after dependency updates..."

          # Run linting
          if npm run lint; then
            echo "✅ Linting passed"
          else
            echo "❌ Linting failed"
            exit 1
          fi

          # Run build
          if npm run build; then
            echo "✅ Build passed"
          else
            echo "❌ Build failed"
            exit 1
          fi

          # Run tests if available
          if npm run test --if-present; then
            echo "✅ Tests passed"
          else
            echo "❌ Tests failed"
            exit 1
          fi

      - name: Generate update summary
        if: steps.check-updates.outputs.has_updates == 'true'
        id: summary
        run: |
          echo "Generating update summary..."

          # Get the diff of package.json
          git diff package.json > package-diff.txt

          # Create a summary of changes
          {
            echo "## 📦 Dependency Updates"
            echo ""
            echo "The following dependencies have been updated:"
            echo ""
            echo "\`\`\`diff"
            cat package-diff.txt
            echo "\`\`\`"
            echo ""
            echo "### ✅ Validation Results"
            echo "- Linting: Passed"
            echo "- Build: Passed"
            echo "- Tests: Passed"
            echo ""
            echo "### 🔄 Update Type"
            echo "Target: ${{ steps.check-updates.outputs.update_target }}"
            echo ""
            echo "---"
            echo "*This PR was automatically created by the dependency update workflow.*"
          } > pr-body.txt

          # Set the PR body as output (escape newlines)
          {
            echo "pr_body<<EOF"
            cat pr-body.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check-updates.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies (${{ steps.check-updates.outputs.update_target }})"
          title: "🔄 Update dependencies (${{ steps.check-updates.outputs.update_target }})"
          body: ${{ steps.summary.outputs.pr_body }}
          branch: update-dependencies-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ steps.check-updates.outputs.update_target }}-update
          assignees: SantoshDasari-ai
          reviewers: SantoshDasari-ai

      - name: Enable auto-merge
        if: steps.check-updates.outputs.has_updates == 'true' && (steps.check-updates.outputs.update_target == 'patch' || steps.check-updates.outputs.update_target == 'minor')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the PR number from the previous step
          PR_NUMBER=$(gh pr list --head update-dependencies-${{ github.run_number }} --json number --jq '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            echo "Enabling auto-merge for PR #$PR_NUMBER"
            gh pr merge $PR_NUMBER --auto --squash
          fi

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ]; then
            echo "✅ Dependency update PR created successfully"
            echo "📋 Update type: ${{ steps.check-updates.outputs.update_target }}"
            if [ "${{ steps.check-updates.outputs.update_target }}" == "patch" ] || [ "${{ steps.check-updates.outputs.update_target }}" == "minor" ]; then
              echo "🔄 Auto-merge enabled (safe updates)"
            else
              echo "⚠️ Manual review required (major updates)"
            fi
          else
            echo "ℹ️ No dependency updates available"
          fi

  check-security-after-update:
    needs: update-dependencies
    if: needs.update-dependencies.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    name: Security Check After Update

    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: chore/update-dependencies-${{ needs.update-dependencies.outputs.update_target }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit on updated dependencies..."
          npm audit --audit-level=moderate || true
