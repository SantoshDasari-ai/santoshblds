name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check .

  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            dist/
            .next/
            out/
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test --if-present

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL analysis
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]')
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]')
        uses: github/codeql-action/analyze@v3

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: npm outdated || true

      - name: Check package vulnerabilities
        run: npm audit --audit-level=high

      - name: License check
        run: |
          npx license-checker --summary || echo "License checker not available"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Analyze bundle size
        run: |
          # Check if we have a bundle analyzer or size reporting tool
          if [ -f "package.json" ] && grep -q "analyze" package.json; then
            npm run analyze || echo "Bundle analysis not available"
          else
            echo "Bundle analysis script not found - checking file sizes manually"
            if [ -d "dist" ]; then
              echo "## Build output sizes:"
              find dist -type f -name "*.js" -o -name "*.css" | head -10 | xargs ls -lh
            elif [ -d ".next" ]; then
              echo "## Next.js build output:"
              find .next -type f -name "*.js" | head -10 | xargs ls -lh
            fi
          fi

      - name: Performance budget check
        run: |
          echo "Checking for large files that might impact performance..."
          # Check for files larger than 500KB
          find . -name "*.js" -o -name "*.css" -type f -size +500k | head -5 || echo "No large files found"

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install accessibility testing tools
        run: |
          npm install -g @axe-core/cli || echo "axe-core CLI not available"

      - name: Run accessibility tests
        run: |
          # Check if we have custom a11y test scripts
          if grep -q "test:a11y\|a11y" package.json; then
            npm run test:a11y || npm run a11y || echo "Accessibility tests not configured"
          else
            echo "No accessibility test scripts found"
            echo "Consider adding axe-core or similar a11y testing tools"
          fi

  # Summary job that all other jobs depend on for branch protection
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        build,
        test,
        security-audit,
        dependency-check,
        performance-check,
        accessibility-check,
      ]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "## CI Pipeline Results"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Security Audit: ${{ needs.security-audit.result }}"
          echo "- Dependency Check: ${{ needs.dependency-check.result }}"
          echo "- Performance Check: ${{ needs.performance-check.result }}"
          echo "- Accessibility Check: ${{ needs.accessibility-check.result }}"

          # Check if any critical jobs failed
          if [[ "${{ needs.lint.result }}" != "success" ]] || 
             [[ "${{ needs.build.result }}" != "success" ]] || 
             [[ "${{ needs.test.result }}" != "success" && "${{ needs.test.result }}" != "skipped" ]] || 
             [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ Critical jobs failed - CI pipeline failed"
            exit 1
          else
            echo "✅ All critical jobs passed - CI pipeline successful"
          fi
